Versão do G++:
g++ (Ubuntu 13.2.0-23ubuntu4) 13.2.0
Copyright (C) 2023 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

Varificando data de envio...
AGORA: 2024-11-08 20:26:13.027363-03:00
PRAZO MÁXIMO: 2024-11-13 23:59:59-03:06
Testando sua solucao...
Procurando exercício 1...
Exercício 1...
Compilando...
g++ -O2 -Wno-unused-result  "ex1.cpp" 
Teste 1: correto! +1.000
Teste 2: correto! +1.000
Teste 3: correto! +1.000
Nota exercicio 1: 3.0
Procurando exercício 2...
Exercício 2...
Compilando...
g++ -O2 -Wno-unused-result  "ex2.cpp" 
Teste 1: correto! +0.100
Teste 2: correto! +0.100
Teste 3: correto! +0.100
Teste 4: correto! +0.100
Teste 5: correto! +0.100
Teste 6: correto! +0.100
Teste 7: correto! +0.100
Teste 8: correto! +0.100
Teste 9: correto! +0.100
Teste 10: correto! +0.100
Teste 11: correto! +0.100
Teste 12: correto! +0.100
Teste 13: correto! +0.100
Teste 14: correto! +0.100
Teste 15: correto! +0.100
Teste 16: correto! +0.100
Teste 17: correto! +0.100
Teste 18: correto! +0.100
Teste 19: correto! +0.100
Teste 20: correto! +0.100
Nota exercicio 2: 2.0
Procurando exercício 3...
Exercício 3...
Compilando...
g++ -O2 -Wno-unused-result  "ex3.cpp" 
Teste 1 deu errado!
O resultado para
#include<iostream>
int main() {
    for(const auto& linha : Arquivo("ex3.cpp"))
        std::cout << linha << std::endl;
    return 0;
}
deveria ser
/tmp/ex3.cpp
//Luis Filipe Silva Forti - 14592348

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string>

//https://stackoverflow.com/questions/62716242/implement-iterator-over-file

class Arquivo
{
private:
    //Guarda o conteudo do arquivo
    std::ifstream _conteudo;
    std::string _linha, _endereco;

public:
    //Abre o arquivo, salvando seu conteudo em _conteudo
    Arquivo(std::string arquivo)
    {
        this->_endereco = arquivo;
        this->_conteudo.open(arquivo, std::ifstream::in);
    }

    Arquivo(const Arquivo& b)
    {
        this->_endereco = b._endereco;
        this->_linha = b._linha;
        this->_conteudo.open(this->_endereco, std::ifstream::in);
    }

    //Para pegar a proxima linha
    std::string proxima_linha()
    {
        std::getline(this->_conteudo, this->_linha);
        return this->_linha;
    }

    //Ao deletar a instancia
    ~Arquivo()
    {
        //Fecha o arquivo
        this->_conteudo.close();
    }

    auto begin() {
        return *this;
    }

    auto end() {
        return Arquivo("");
    }

    const std::string& operator*() const {
        return this->_linha;
    }

    Arquivo& operator++() {
        proxima_linha();
        return *this;
    }

    Arquivo& operator++(int) {
        proxima_linha();
        return *this;
    }

    bool operator==(Arquivo) const {
        return !!this->_conteudo;
    }

    bool operator!=(Arquivo) const {
        return !!this->_conteudo;
    }
};

mas deu

#include <stdio.h>
#include <iostream>
#include <fstream>
#include <string>



class Arquivo
{
private:
    
    std::ifstream _conteudo;
    std::string _linha, _endereco;

public:
    
    Arquivo(std::string arquivo)
    {
        this->_endereco = arquivo;
        this->_conteudo.open(arquivo, std::ifstream::in);
    }

    Arquivo(const Arquivo& b)
    {
        this->_endereco = b._endereco;
        this->_linha = b._linha;
        this->_conteudo.open(this->_endereco, std::ifstream::in);
    }

    
    std::string proxima_linha()
    {
        std::getline(this->_conteudo, this->_linha);
        return this->_linha;
    }

    
    ~Arquivo()
    {
        
        this->_conteudo.close();
    }

    auto begin() {
        return *this;
    }

    auto end() {
        return Arquivo("");
    }

    const std::string& operator*() const {
        return this->_linha;
    }

    Arquivo& operator++() {
        proxima_linha();
        return *this;
    }

    Arquivo& operator++(int) {
        proxima_linha();
        return *this;
    }

    bool operator==(Arquivo) const {
        return !!this->_conteudo;
    }

    bool operator!=(Arquivo) const {
        return !!this->_conteudo;
    }
};

Teste 2: correto! +0.250
Teste 3: correto! +0.250
Teste 4: correto! +0.250
Teste 5: correto! +0.250
Teste 6: correto! +0.250
Teste 7: correto! +0.250
Teste 8: correto! +0.250
Teste 9: correto! +0.250
Teste 10: correto! +0.250
Teste 11: correto! +0.250
Teste 12: correto! +0.250
Teste 13: correto! +0.250
Teste 14: correto! +0.250
Teste 15: correto! +0.250
Teste 16: correto! +0.250
Teste 17: correto! +0.250
Teste 18: correto! +0.250
Teste 19: correto! +0.250
Teste 20: correto! +0.250
Nota exercicio 3: 4.8
Nota total: 9.80
{"scores": {"ex1": 3.0, "ex2": 2.0, "ex3": 4.8}}
